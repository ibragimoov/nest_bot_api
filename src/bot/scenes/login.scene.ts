import { Context, Wizard, WizardStep} from 'nestjs-telegraf';
import { Buttons } from 'src/keyboard/buttons';
import { Scenes } from 'telegraf';
import { BotService } from '../bot.service';

@Wizard('login')
export class LoginScene {
    private buttons = new Buttons()
    constructor(private userController: BotService) {}

    @WizardStep(1)
    step1(@Context() ctx: Scenes.WizardContext) {
        ctx.replyWithHTML('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞. . .\n–ù–∞–ø—Ä–∏–º–µ—Ä <b><i>+79781234567</i></b>',
        this.buttons.BACK_BUTTON())
        ctx.wizard.next()
    }

    @WizardStep(2)
    async step2(@Context() ctx: any) {
        let phone_text = ctx.message.text
            if (await phone_text =='üëà –ù–∞–∑–∞–¥') {
                ctx.reply(`–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, ${ctx.from.first_name}`, 
                this.buttons.SET_AUTH())
                return ctx.scene.leave()
            }
            if (await this.userController.phoneSchema.isValid(phone_text)) {
                await ctx.reply('–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö. . .');
                let phone: number = Number(phone_text.slice(1, 12))
                const user = await this.userController.findUser(phone)

                if (user) {
                    await ctx.reply('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω.\n–î–æ—Å—Ç—É–ø –∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—é –æ—Ç–∫—Ä—ã—Ç',
                      this.buttons.SET_MAIN_MENU()
                    );

                    return ctx.scene.leave();

                } else {
                    const newUser = {
                        chatId: ctx.chat.id,
                        name: ctx.from.first_name,
                        phone: phone
                    }
                    
                    await this.userController.saveUser(newUser)
                    await ctx.reply('–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω\n–û—Ç–∫—Ä—ã–≤–∞—é –¥–æ—Å—Ç—É–ø –∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—é. . .',
                    this.buttons.SET_MAIN_MENU())
                    
                    return ctx.scene.leave()
                }
            } else {
                ctx.replyWithHTML('<b>Error</b>: –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∑–∞–ø–∏—Å–∞–Ω <i>–Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ</i>')
            }
    }
}